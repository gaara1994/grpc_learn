// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: music_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	// 用户请求获取某位歌手的所有歌曲列表
	ListSongs(ctx context.Context, in *ArtistRequest, opts ...grpc.CallOption) (MusicService_ListSongsClient, error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) ListSongs(ctx context.Context, in *ArtistRequest, opts ...grpc.CallOption) (MusicService_ListSongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicService_ServiceDesc.Streams[0], "/MusicService/ListSongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicServiceListSongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MusicService_ListSongsClient interface {
	Recv() (*SongResponse, error)
	grpc.ClientStream
}

type musicServiceListSongsClient struct {
	grpc.ClientStream
}

func (x *musicServiceListSongsClient) Recv() (*SongResponse, error) {
	m := new(SongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MusicServiceServer is the server API for MusicService service.
// All implementations must embed UnimplementedMusicServiceServer
// for forward compatibility
type MusicServiceServer interface {
	// 用户请求获取某位歌手的所有歌曲列表
	ListSongs(*ArtistRequest, MusicService_ListSongsServer) error
	mustEmbedUnimplementedMusicServiceServer()
}

// UnimplementedMusicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServiceServer struct {
}

func (UnimplementedMusicServiceServer) ListSongs(*ArtistRequest, MusicService_ListSongsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedMusicServiceServer) mustEmbedUnimplementedMusicServiceServer() {}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_ListSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArtistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicServiceServer).ListSongs(m, &musicServiceListSongsServer{stream})
}

type MusicService_ListSongsServer interface {
	Send(*SongResponse) error
	grpc.ServerStream
}

type musicServiceListSongsServer struct {
	grpc.ServerStream
}

func (x *musicServiceListSongsServer) Send(m *SongResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSongs",
			Handler:       _MusicService_ListSongs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "music_service.proto",
}
