// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: bidirectional_calculate.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculateServiceClient is the client API for CalculateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateServiceClient interface {
	BidirectionalSum(ctx context.Context, opts ...grpc.CallOption) (CalculateService_BidirectionalSumClient, error)
}

type calculateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateServiceClient(cc grpc.ClientConnInterface) CalculateServiceClient {
	return &calculateServiceClient{cc}
}

func (c *calculateServiceClient) BidirectionalSum(ctx context.Context, opts ...grpc.CallOption) (CalculateService_BidirectionalSumClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculateService_ServiceDesc.Streams[0], "/CalculateService/BidirectionalSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateServiceBidirectionalSumClient{stream}
	return x, nil
}

type CalculateService_BidirectionalSumClient interface {
	Send(*SumRequest) error
	Recv() (*SumResponse, error)
	grpc.ClientStream
}

type calculateServiceBidirectionalSumClient struct {
	grpc.ClientStream
}

func (x *calculateServiceBidirectionalSumClient) Send(m *SumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculateServiceBidirectionalSumClient) Recv() (*SumResponse, error) {
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateServiceServer is the server API for CalculateService service.
// All implementations must embed UnimplementedCalculateServiceServer
// for forward compatibility
type CalculateServiceServer interface {
	BidirectionalSum(CalculateService_BidirectionalSumServer) error
	mustEmbedUnimplementedCalculateServiceServer()
}

// UnimplementedCalculateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateServiceServer struct {
}

func (UnimplementedCalculateServiceServer) BidirectionalSum(CalculateService_BidirectionalSumServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalSum not implemented")
}
func (UnimplementedCalculateServiceServer) mustEmbedUnimplementedCalculateServiceServer() {}

// UnsafeCalculateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateServiceServer will
// result in compilation errors.
type UnsafeCalculateServiceServer interface {
	mustEmbedUnimplementedCalculateServiceServer()
}

func RegisterCalculateServiceServer(s grpc.ServiceRegistrar, srv CalculateServiceServer) {
	s.RegisterService(&CalculateService_ServiceDesc, srv)
}

func _CalculateService_BidirectionalSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateServiceServer).BidirectionalSum(&calculateServiceBidirectionalSumServer{stream})
}

type CalculateService_BidirectionalSumServer interface {
	Send(*SumResponse) error
	Recv() (*SumRequest, error)
	grpc.ServerStream
}

type calculateServiceBidirectionalSumServer struct {
	grpc.ServerStream
}

func (x *calculateServiceBidirectionalSumServer) Send(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculateServiceBidirectionalSumServer) Recv() (*SumRequest, error) {
	m := new(SumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateService_ServiceDesc is the grpc.ServiceDesc for CalculateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CalculateService",
	HandlerType: (*CalculateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalSum",
			Handler:       _CalculateService_BidirectionalSum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectional_calculate.proto",
}
